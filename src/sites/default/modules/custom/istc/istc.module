<?php
// $Id:$


/**
 * Implementation of hook_menu().
 *
 * 
 * @return array
 */

function istc_menu() {
  $items = array();
 
  $items['node/%node/view'] = array(
    'weight' => -10,
  );
  
  $items['node/%node/blog'] = array(
    'title' => 'Blog Posts',
    'page callback' => '_istc_groupblog',
    'page arguments' => array(1),
    'access callback' => '_istc_check_group_tab_permission',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  
  $items['node/%node/files'] = array(
    'title' => 'File Repository',
    'page callback' => '_istc_groupfiles',
    'page arguments' => array(1),
    'access callback' => '_istc_check_group_tab_permission',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );
  
  $items['node/%node/filedepot'] = array(
    'title' => 'Files Beta',
    'page callback' => '_istc_groupfilesbeta',
    'page arguments' => array(1),
    'access callback' => '_istc_check_group_tab_permission',
    'access arguments' => array(1),
    'weight' => -7,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/pages'] = array(
    'title' => 'Pages',
    'page callback' => '_istc_grouppages',
    'page arguments' => array(1),
    'access callback' => '_istc_check_group_tab_permission',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  );
  /*
  $items['node/%node/events'] = array(
    'title' => 'Events',
    'page callback' => '_istc_groupevents',
    'page arguments' => array(1),
    'access callback' => '_istc_check_group_tab_permission',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  ); 
  */
  $items['node/%node/pubs'] = array(
    'title' => 'Publications',
    'page callback' => '_istc_grouppubs',
    'page arguments' => array(1),
    'access callback' => '_istc_check_group_tab_permission',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  ); 
  
  $items['node/%node/edit'] = array(
    'weight' => 1,
  );
  
  $items['gocollab'] = array(
    'page callback' => '_goto_collab',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    );
  
  return $items;
}

function user_authenticated() {
    global $user;
    return $user->uid;
}


/*
 * Check whether to display group tabs.
 */
function _istc_check_group_tab_permission($node) {
  return ($node->type == 'group') and user_authenticated() ;
}


/* display group content */
function _istc_groupblog($node) {
  /*$group = og_get_group('node', $node->nid);
  return views_embed_view("og_nodes","og_blog_block", $group->gid);*/
  return views_embed_view("group_content","group_blog_block", $node->nid);
}

function _istc_groupfiles($node) {
  return views_embed_view("group_content","group_files_block", $node->nid);
}

function _istc_groupfilesbeta($node) {
  return filedepot_main();
}

function _istc_grouppages($node) {
  return views_embed_view("group_content","group_pages_block", $node->nid);
}
/*
function _istc_groupevents($node) {
  //drupal_goto("collab/calendar/month/".$group->gid);
  return views_embed_view("group_content","group_events_block", $node->nid);
}
*/
function _istc_grouppubs($node) {
  return views_embed_view("group_content","group_pubs_block", $node->nid);
}

function istc_menu_alter (&$items) {
    $items['collab']['access callback'] = 'user_authenticated';
}

function _goto_collab () {
    global $user;
    $dest = drupal_get_destination();

    if ($user->uid) { /* user is logged in, go to collab page */
        drupal_goto('content/istc-social-main-group',$dest);
    } else {  /* anonymous user, go to user login page */
        drupal_goto('user',$dest);
    }
}

function get_update_event ($nid) {  
  $node = node_load($nid);
  $created = $node->created;
  $updated = $node->changed;
  $lastcomment = $node->last_comment_timestamp;
  $event = "";
  if ($updated > $created) {
      if ($updated > $lastcomment) {
          $event = "UDPATED";
      } else {
          $event = "NEW COMMENT";
      }
  } else {
      if ($lastcomment > $created) {
          $event = "NEW COMMENT";
      } else {
          $event = "NEW CONTENT";
      }
  }
  return $event;
}

// use wysiwyg editor for personal contact form
//THIS CAUSES AN ERROR WHEN MAIL IS SENT.
//Notice: Array to string conversion in HTMLMailSystem->format() (line 49 of /var/www/html/drupal/istc-social/src/sites/all/modules/htmlmail/htmlmail.mail.inc).
/*
function istc_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'contact_personal_form') {
      $form['message']['#type']='text_format';
  }
}
 */

/* Edit Filedepot New Folder form so that the "Inherit Parent Permission" checkbox is selected by default */
function istc_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'filedepot_newfolder_form') {
    $form['filedepot_inherit_permissions']['#default_value'] = array('yes');
    $form['filedepot_inherit_permissions']['#access'] = user_access('administer users');
  }
    if ($form_id == 'filedepot_newfile_form') {
    $form['filedepot_email_notification']['#default_value'] = array('no');
    $form['filedepot_email_notification']['#access'] = user_access('administer users');
  }
}

/* hook form_profile2_form_alter */
/* istc role field should only be accessible to admins */
function istc_form_profile2_form_alter(&$form, &$form_state) {
    //dpm($form);
    $form['profile_profile_info']['field_istc_role']['#access'] = user_access('administer users');
}

/* hook mail */
function istc_mail ($key, &$message, $params) {
    $sitename = variable_get('site_name', "Default site name");    
    switch($key) {
      case 'digest':
        $langcode = $message['language']->language;
        $message['subject'] = t($params['freq'].' Digest - Groups Activity on '.$sitename, array('langcode' => $langcode));
        $message['body'][] = t($params['body'], array('langcode' => $langcode));
        break;
    }
}
  
function _something_to_report ($report) {
   return (/*(strpos($report,'There is no recent activity.') == FALSE) || /* old notifications */
           /*(strpos($report,'New calendar events') == TRUE) || /* old notifications */
           (strpos($report,'There is no new content.') == FALSE) ||
           (strpos($report,'New Group Comments') == TRUE)  ||
           (strpos($report,'New Calendar Events') == TRUE) ||
           (strpos($report,'New Groups') == TRUE));
;
}

function send_digest_to_users () {
   watchdog('ISTC Digest', "executing send_digest_to_users...");
   global $user;
   $ismonday = (date('w') == 1);
   /*$query =  "select uid, name from users where uid  and uid !=1> 0 ";*/
   $query =  "select uid, name from users where uid  and uid > 0 ";

   $result = db_query($query);
   $users = array();
   foreach ($result as $users) {
       $uid = $users->uid;
       $usr = user_load($uid);
       $profile = profile2_load_by_user($uid, 'profile_info');
       
       $name = $users->name;
       $email = $usr->mail;
       if ($profile) { // special check to avoid sbp users
       if ($profile->field_istc_notifications) {
           $notify = $profile->field_istc_notifications['und'][0]['value'];
           
           if ($notify == 'daily') {  
               $original_user = $user;
               $old_state = drupal_save_session(FALSE);
               $user = user_load($uid);

               /* $output = views_embed_view("group_content","groups_activity_digest"); /* old notifications */
               $output = views_embed_view("group_notifications","group_activity_digest_daily");
               if (_something_to_report($output)) {
                   /*_send_digest($email, $key, $output, "Daily");*/
                   $params['body'] = $output;
                   $params['freq'] = "Daily";
                   watchdog('ISTC Digest', "Sending Daily Digest to ".$email);
                   drupal_mail('istc', 'digest', $email, user_preferred_language($user), $params);
               }

               $user = $original_user;
               drupal_save_session($old_state);
               
           } else if ($notify == 'weekly') {
               if ($ismonday) {
                  $original_user = $user;
                  $old_state = drupal_save_session(FALSE);

                  $user = user_load($uid);

                  /* $output = views_embed_view("group_content","groups_activity_digest_weekly"); /* old notifications */
                  $output = views_embed_view("group_notifications","group_activity_digest_weekly");
                  if (_something_to_report($output)) {
                      /*_send_digest($email, $key, $output, "Weekly");*/
                      $params['body'] = $output;
                      $params['freq'] = "Weely";
                      watchdog('ISTC Digest', "Sending Weekly Digest to ".$email);
                      drupal_mail('istc', 'digest', $email, user_preferred_language($user), $params);
                  }

                  $user = $original_user;
                  drupal_save_session($old_state);
               }       
           }
       }
       }      
   }
}

function test_digest_to_users () {
       $week = 604800; // in seconds
       $day = 86400;
       
       $uid = 94; // Kari Nies
       $usr = user_load($uid);
       $profile = profile2_load_by_user($uid, 'profile_info');
       
       $name = $usr->name;
       $email = $usr->mail;
       

               /*
               $original_user = $usr;
               $old_state = drupal_save_session(FALSE);
               $user = user_load($uid);

               $output = views_embed_view("group_notifications","group_activity_digest_daily");
               $output = $output.get_filedepot_updates($day);
               print $output;
               if (_something_to_report($output)) {
                   watchdog('ISTC Digest', "Sending Daily Digest to ".$email);
                   $params['body'] = $output;
                   $params['freq'] = "Daily";
                   drupal_mail('istc', 'digest', $email, user_preferred_language($user), $params);
               }
               $user = $original_user;
               drupal_save_session($old_state);
              */
               
               $original_user = $usr;
               $old_state = drupal_save_session(FALSE);

               $user = user_load($uid);

               $output = views_embed_view("group_notifications","group_activity_digest_weekly");
               $output = $output.get_filedepot_updates($week*7);
               print $output;
               if (_something_to_report($output)) {
                   $params['body'] = $output;
                   $params['freq'] = "Weely";
                   watchdog('ISTC Digest', "Sending Weekly Digest to ".$email);
                   drupal_mail('istc', 'digest', $email, user_preferred_language($user), $params);
               }

               $user = $original_user;
               drupal_save_session($old_state);
}

function istc_cron() {
    send_digest_to_users();
}

function get_filedepot_updates($timerange) {
    $output = "";
    global $user;
    $now = time();
    $threshold = $now-$timerange;
    // get all new files within timerange
    $result = db_query("
                        SELECT  file.fid AS fid, file.cid AS cid, file.title AS title, file.description AS descr, file.submitter AS uid, file.date AS date 
                        FROM {filedepot_files} file 
                        WHERE (date>=$threshold)
                        ORDER BY date DESC
                       ");
    foreach($result as $file) {
        //dpm($file);
        $owner = user_load($file->uid); 
        $ownername = $owner->realname;
        $filename = $file->title;
        $date = date("l, F j, Y, g:i a", $file->date);
        // get groups from directory permissions

        $result = db_query("
                            SELECT  access.permid AS gid, access.catid AS catid, access.permtype AS permtype 
                            FROM {filedepot_access} access 
                            WHERE (permtype='group') AND (catid=$file->cid)
                          ");

          foreach ($result as $access) {
              if (og_is_member('node',$access->gid)) {
                // get group title without loading entire node
                $titleresult = db_query("SELECT node.title as title FROM node WHERE nid = $access->gid");
                foreach ($titleresult as $titlenode) {
                    $grouptitle = $titlenode->title;
                }
                $filelink = l($filename, "node/".$access->gid."/filedepot/", array("query"=>(array('fid'=>$file->fid))));
                $fileoutput = "File upload: ".$filelink." uploaded by ".l($ownername,"user/".$user->uid)." on ".$date." to ".l($grouptitle,"node/".$access->gid."/filedepot");
                if ($file->descr) {
                    $fileoutput = $fileoutput."<small><em><p>".$file->descr."</p></em></small>";
                }
                $output = $output.$fileoutput."<hr>";
              }
        }
    }
    if (!$output=="") {// add heading only if there is content
        $output = "<h3>New File Uploads</h3>".$output;
    }
    return $output;
}

function test_filedepot_updates() {
    $week = 604800; // in seconds
    $day = 86400;
    get_filedepot_updates($week*7);
}